
Kapitel 17 :: GRASP Designing Objects with Responsibilities

17.1 UML versus Design Principles
- Det bedste værktøj til OOD er ikke UML, men et sind der er veluddannet indenfor disiplinen.

17.2 Object design, Example inputs, activities and Outputs
- Giver et godt overblik over hvad man gør når man skal designe software med en
  itterativ metode.
  - Der kigges på hvad der ER allerede gjort. (workshops, diagrammer etc)
  - Der beskrives hvordan de forskellige Artifacts/diagrammer kan bruges i POS
    eksemplet.
  - Man har undersøgt fx showstoppers som Swing UI, og man har lavet nogle
    usecases og en domænemodel.. mfl
- Man bruger så 1. dag at designe/modellere.
  - Dette kunne være test-first driven programming/developement
  - eller UML eller andre Model teknikker
  - Man kan designe UI, Databaser, Objecter etc
  - Bruge prototyper, sketches etc
  - Når dag 1 er færdig kan man have produceret alt fra UI sketches til klasse
    diagrammer, database modeller mfl.

- Dag 2. går man i gang med at programmere, for at sikre sig at man ikke falder
  ned i Waterfall-mentaliteten.

17.3 Responsabilities and R-Driven Design
- Alle objecter skal have et ansvar, en rolle og samarbejdskontrakter
  (collaborations)
  - Responsabilities kan være 2 ting:
    - Doing
      - Gøre noget selv
      - få andre objecter til at gøre noget
      - koordinere aktiviteter i andre objekter.
    - Knowing
      - Vide noget om egen data (privat fx)
      - Kende til relaterede objekter
      - Vide hvad den kan beregne eller regne ud.
    fx. et salg laver madobjekter og kender selv totalen.
- Guideline
  - Domænemodellen inspirer ofte hvad objekter ved.
  - LOW representational gap (regl på side 138 kap 9)
- Responsabilities are NOT the same as a methods, og mange responsabilities
  kan være vartaget af mange klasser såvel som få de har måske bare forskellige
  roles?
- Collaboration er når methoder arbejder sammen med andre metoder, fx
  en getTotal() metode der spørger efter individuelle subtotaler

GENERELT: GRASP hjælper med at sætte ord på objekters ansvar, derfor er det
brugbart ifht Objekt orienteret design.

17.4 GRASP a methodical approach to basic OO design
  - GRASP er mest til at hjælpe os med at lære om principperne med ansvar osv
  - Når man først forstår det, er det ikke så nødvendigt med specifikke termer..

17.5

17.6

17.7 Summary
  2. RDD as a metaphor for object design, a community of
     collaborating responsible objects.
  3. Patterns as a way to name and explain OO design ideas.
     GRASP for basic patterns of assigning responsibilities
     GoF for more advanced design ideas.
     Patterns can be applied during modeling and during coding.
  4. UML for OO design visual modeling, during which time both GRASP and GoF patterns can
     be applied.

17.8 Creator - Information Expert - Low Coupling - Controller - High Cohesion

  5 GRASP's (General Responsability Assignment Software Patterns)

  Creator
  ? Hvem laver [object A]?
    (jo flere jo bedre) Et objekt der;
  ! Et objekt der "contains or compositely aggregates A."
  ! Et objekt der "holder styr på A."
  ! Et objekt der "closely uses A."
  ! Et objekt der har "the initializing data" for A.

  Information Expert
  ? Hvem ved noget om et objekt, hvis det får et "id/en nøgle/navn"?
    eller
  ? What is a basic principle by which to assign responsibilities to objects?
  ! Assign a responsibility to the class that has the information needed to
    fulfill it.

  Low Coupling
  ? Why Board knows about squares, and why "dog" shouldn't ?
    eller
  ? How to reduce the impact of change ?
  ! Assign responsibilities so that (unnecessary) coupling remains low. Use this
    principle to evaluate alternatives. !

  Controller
  ? What first object beyond the UI layer receives and coordinates ("controls") a
    system operation ?
  ! Assign the responsibility to an object representing one of these choices:
    ! Represents the overall "system," a "root object,"
    ! a device that the software is running within,
    ! or a major subsystem (these are all variations of a facade controller).
    ! Represents a use case scenario within which the system operation
      occurs (a use case or session controller)!

  High Cohesion
  ? Hvordan er du ikke dum og kører efter gammeldags C principper når du har OO
    eller
  ? How to keep objects focused, understandable, and manageable, and as a side
    effect, support Low Coupling ?

  ! Assign responsibilities so that cohesion remains high. Use this to evaluate
    alternatives.
    eller
  ! Lad nu være med at lave gigantiske klasser, fordel funktionalitet ud over
    mange klasser.. Det er smartere! og mere maintainable.

17.9 Applying GRASP to Object Design
  - Der findes i alt 9 GRASP patterns, de sidste 4 bliver snakket om i kapitel
    25: Pure Fabrication - Indirection - Protected Variations - Polymorphism

17.10 ++
  - Detaljerede eksempler på de første 5.
